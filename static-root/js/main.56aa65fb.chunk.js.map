{"version":3,"sources":["components/word.js","App.js","serviceWorker.js","index.js"],"names":["Word","useState","wrd","setWrd","endpoint","setEndpoint","r","getWord","ep","axios","get","headers","then","resp","data","console","log","useEffect","className","style","width","word","meaning","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4PA+DeA,MA5Df,WAAgB,IAAD,EACyBC,mBAAS,IADlC,gCAEWA,mBAAS,KAFpB,mBAEJC,EAFI,KAECC,EAFD,OAGqBF,mBAAS,MAH9B,mBAGJG,EAHI,KAGMC,EAHN,KAIPC,EAAI,GAIR,SAASC,EAAQC,GACbC,IAAMC,IAAN,0CAA6CF,GAAM,CAC/CG,QAAS,CACL,OAAU,sBAEfC,MAAK,SAAAC,GACJP,EAAIO,EAAKC,KACTX,EAAOG,GACPS,QAAQC,IAAId,MAoBpB,OA/BAe,qBAAU,WACNV,EAAQH,KACT,IA8BC,yBAAKc,UAAU,aACX,6BACA,yBAAKA,UAAU,OAAOC,MAAO,CAACC,MAAO,UACjC,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAehB,EAAImB,MACjC,uBAAGH,UAAU,aAAchB,EAAIoB,SAC/B,6BACCf,EACD,yBAAKW,UAAU,OACX,yBAAKA,UAAU,SACVd,EAAW,MAAQ,4BAAQc,UAAY,kBAAkBK,QApBlF,WACI,GAAInB,GAAY,MAAQA,GAAY,KAAK,CACrC,IAAII,EAAKJ,EAAW,EACpBC,EAAYG,GACZO,QAAQC,IAAI,OAAQR,GACpBD,EAAQC,MAe4B,SAExB,yBAAKU,UAAU,SACVd,EAAW,MAAQ,4BAAQc,UAAY,kBAAkBK,QA/BlF,WACI,GAAGnB,GAAY,MAAQA,GAAY,KAAK,CACpC,IAAII,EAAKJ,EAAW,EACpBC,EAAYG,GACZO,QAAQC,IAAI,OAAQR,GACpBD,EAAQC,MA0B4B,cC1CjCgB,MARf,WACE,OACE,yBAAKN,UAAU,aACd,kBAAC,EAAD,QCMeO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.56aa65fb.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nfunction Word(){\n    const [words_list, setWords_list] = useState([]);\n    const [wrd, setWrd] = useState('');\n    const [endpoint, setEndpoint] = useState(4760);\n    var r = '';\n    useEffect(() => {\n        getWord(endpoint)\n    }, [])  \n    function getWord(ep){\n        axios.get(`http://localhost:8000/api/words/${ep}`, {\n            headers: {\n                'accept': 'application/json'\n            }\n        }).then(resp => {\n            r = resp.data;\n            setWrd(r)\n            console.log(wrd)\n        })\n    }\n    function next(){\n        if(endpoint <= 9518 && endpoint >= 4760){\n            var ep = endpoint + 1\n            setEndpoint(ep)\n            console.log('next', ep)\n            getWord(ep)\n        }\n    }\n    function prev(){\n        if (endpoint >= 4760 && endpoint <= 9518){\n            var ep = endpoint - 1\n            setEndpoint(ep)\n            console.log('prev', ep)\n            getWord(ep)\n        }  \n    }\n    \n    return (\n        <div className=\"container\">\n            <br/>\n            <div className=\"card\" style={{width: 18 + 'rem'}}>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{ wrd.word }</h5>\n                    <p className=\"card-text\">{ wrd.meaning }</p>\n                    <br/>\n                    {getWord}\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            {endpoint > 4760 && <button className = \"btn btn-primary\" onClick={prev}>prev</button>}\n                        </div>\n                        <div className=\"col-3\">\n                            {endpoint < 9518 && <button className = \"btn btn-primary\" onClick={next}>next</button>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Word;\n","import React from 'react';\nimport Word from './components/word';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n     <Word />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}